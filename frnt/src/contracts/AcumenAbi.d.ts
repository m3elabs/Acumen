/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type FundsInput = { balance: BigNumberish; loanedBalance: BigNumberish };

export type FundsOutput = { balance: BN; loanedBalance: BN };

export type DepositLimitersInput = {
  startTime: BigNumberish;
  duration: BigNumberish;
  gracePeriod: BigNumberish;
  endTime: BigNumberish;
  limitPerUser: BigNumberish;
  capacity: BigNumberish;
  maxUtilization: BigNumberish;
};

export type DepositLimitersOutput = {
  startTime: BN;
  duration: BN;
  gracePeriod: BN;
  endTime: BN;
  limitPerUser: BN;
  capacity: BN;
  maxUtilization: BN;
};

export type PoolInfoInput = {
  poolName: string;
  poolTypeIsStaking: boolean;
  apy: BigNumberish;
  paused: boolean;
  quarterlyPayout: boolean;
  uniqueUsers: BigNumberish;
  tokenInfo: ContractIdInput;
  funds: FundsInput;
  pool_id: BigNumberish;
  depositLimiters: DepositLimitersInput;
};

export type PoolInfoOutput = {
  poolName: string;
  poolTypeIsStaking: boolean;
  apy: BN;
  paused: boolean;
  quarterlyPayout: boolean;
  uniqueUsers: BN;
  tokenInfo: ContractIdOutput;
  funds: FundsOutput;
  pool_id: BN;
  depositLimiters: DepositLimitersOutput;
};

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type StakingTransactionInput = {
  balance: BigNumberish;
  time: BigNumberish;
  user: IdentityInput;
  entries: BigNumberish;
  poolUser: boolean;
  withdrawTime: BigNumberish;
  rewardsPaid: BigNumberish;
};

export type StakingTransactionOutput = {
  balance: BN;
  time: BN;
  user: IdentityOutput;
  entries: BN;
  poolUser: boolean;
  withdrawTime: BN;
  rewardsPaid: BN;
};

export type BorrowingTransactionInput = {
  balance: BigNumberish;
  time: BigNumberish;
  user: IdentityInput;
  poolUser: boolean;
};

export type BorrowingTransactionOutput = {
  balance: BN;
  time: BN;
  user: IdentityOutput;
  poolUser: boolean;
};

export type TransactionInput = {
  staking: StakingTransactionInput;
  borrowing: BorrowingTransactionInput;
};

export type TransactionOutput = {
  staking: StakingTransactionOutput;
  borrowing: BorrowingTransactionOutput;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface AcumenAbiInterface extends Interface {
  functions: {
    borrow: FunctionFragment;
    claim_quarterly_payout: FunctionFragment;
    create_pool: FunctionFragment;
    deposit: FunctionFragment;
    edit_pool: FunctionFragment;
    get_contract_id: FunctionFragment;
    get_pool_info_from_id: FunctionFragment;
    get_total_pools: FunctionFragment;
    get_total_stakes_of_user: FunctionFragment;
    get_user_stakes_info_per_pool: FunctionFragment;
    repay: FunctionFragment;
    set_pool_paused: FunctionFragment;
    whitelist: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claim_quarterly_payout",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_pool",
    values: [
      boolean,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "edit_pool",
    values: [
      BigNumberish,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_contract_id",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_pool_info_from_id",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_total_pools",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_total_stakes_of_user",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_user_stakes_info_per_pool",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_pool_paused",
    values: [BigNumberish, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [BigNumberish, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "borrow", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "claim_quarterly_payout",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_pool",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "edit_pool",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_contract_id",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_pool_info_from_id",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_total_pools",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_total_stakes_of_user",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_user_stakes_info_per_pool",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "repay", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_pool_paused",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "whitelist",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw",
    data: BytesLike
  ): DecodedValue;
}

export class AcumenAbi extends Contract {
  interface: AcumenAbiInterface;
  functions: {
    borrow: InvokeFunction<[pool_id: BigNumberish, amount: BigNumberish], void>;

    claim_quarterly_payout: InvokeFunction<[pool_id: BigNumberish], void>;

    create_pool: InvokeFunction<
      [
        pool_is_staking: boolean,
        pool_name: string,
        apy: BigNumberish,
        qrt_payout: boolean,
        duration: BigNumberish,
        max_utilization: BigNumberish,
        capacity: BigNumberish,
        limit_per_user: BigNumberish
      ],
      BN
    >;

    deposit: InvokeFunction<
      [pool_id: BigNumberish, amount: BigNumberish],
      void
    >;

    edit_pool: InvokeFunction<
      [
        pool_id: BigNumberish,
        pool_name: string,
        pause: boolean,
        apy: BigNumberish,
        max_utilization: BigNumberish,
        capacity: BigNumberish
      ],
      void
    >;

    get_contract_id: InvokeFunction<[], ContractIdOutput>;

    get_pool_info_from_id: InvokeFunction<
      [pool_id: BigNumberish],
      PoolInfoOutput
    >;

    get_total_pools: InvokeFunction<[], BN>;

    get_total_stakes_of_user: InvokeFunction<[pool_id: BigNumberish], BN>;

    get_user_stakes_info_per_pool: InvokeFunction<
      [pool_id: BigNumberish],
      TransactionOutput
    >;

    repay: InvokeFunction<[pool_id: BigNumberish, amount: BigNumberish], void>;

    set_pool_paused: InvokeFunction<
      [pool_id: BigNumberish, flag: boolean],
      void
    >;

    whitelist: InvokeFunction<[pool_id: BigNumberish, status: boolean], void>;

    withdraw: InvokeFunction<
      [pool_id: BigNumberish, amount: BigNumberish],
      void
    >;
  };
}
